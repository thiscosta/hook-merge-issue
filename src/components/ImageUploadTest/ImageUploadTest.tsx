/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import ImgQ3DCurrentView2Image from 'src/assets/images/imageuploadtest_img_Q_3D_Current_View2.png';
import ImgQ3DCurrentView2Image1 from 'src/assets/images/imageuploadtest_img_Q_3D_Current_View2_1.png';
import ImgQ3DCurrentView2Image2 from 'src/assets/images/imageuploadtest_img_Q_3D_Current_View2_2.png';
import VectorImage from 'src/assets/images/imageuploadtest_Vector.png';
import Q3DCurrentView21Image from 'src/assets/images/imageuploadtest_Q_3D_Current_View2_1.png';
import { styled } from '@mui/material/styles';
import ImgFrame4ImageImage from 'src/assets/images/imageuploadtest_img_Frame4.png';
import ImgFrame4ImageImage1 from 'src/assets/images/imageuploadtest_img_Frame4_1.png';
import ImgFrame4ImageImage2 from 'src/assets/images/imageuploadtest_img_Frame4_2.png';
import { ImageUploadTestProps } from 'src/types';
import { animated, useSpring, easings } from 'react-spring';
import useImageUploadTest from 'src/components/ImageUploadTest/useImageUploadTest';
 
const Property1Default: any = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `9px 60px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
  height: "100%",  
  width: "100%",  
});
  
const ImgFrame4: any = animated(styled("div", {
    shouldForwardProp: (prop: any) => !["data"].includes(prop.toString())
    })(({ data }: any) =>({  
  backgroundImage: data.currentVariant === 'Property1Variant2' ? `url(${ImgFrame4ImageImage1})` : data.currentVariant === 'Property1Variant3' ? `url(${ImgFrame4ImageImage2})` : `url(${ImgFrame4ImageImage})`,  
  backgroundPosition: `center`,  
  backgroundSize: `cover`,  
  backgroundRepeat: `no-repeat`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  height: `137px`,  
  width: `160px`,  
  margin: `0px`,  
  overflow: `hidden`,  
})));
  
const Frame5: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Frame3: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `416.41px`,  
  margin: `0px`,  
});
  
const ImgQ3DCurrentView2: any = styled("img")({  
  height: `171.41px`,  
  width: `171.41px`,  
  objectFit: `cover`,  
  flexGrow: `1`,  
  margin: `0px`,  
  cursor: `pointer`,  
});
  
const Frame1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  width: `235px`,  
  margin: `0px 0px 0px 10px`,  
});
  
const EngineeringStandup: any = animated(styled("div", {
    shouldForwardProp: (prop: any) => !["data"].includes(prop.toString())
    })(({ theme, data }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
  cursor: `pointer`,  
})));
  
const PlaylistAddCheck: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 2px`,  
  overflow: `hidden`,  
});
  
const Vector: any = styled("img")({  
  height: `8.67px`,  
  width: `12.67px`,  
  margin: `0px`,  
});
  
const Q3DCurrentView21: any = styled("img")({  
  height: `31.47px`,  
  width: `31.47px`,  
  objectFit: `cover`,  
  margin: `10px 0px 0px 0px`,  
});
 
function ImageUploadTest(props: ImageUploadTestProps): JSX.Element {
  const {data, fns} = useImageUploadTest();
  
  
  const ImgFrame4Property1Default = { height: `137px` , width: `160px`  }
  const ImgFrame4Property1Variant2 = { height: `148px` , width: `191px`  }
  const ImgFrame4Property1Variant3 = { height: `150px` , width: `175px`  }
  const [ImgFrame4StateStyles, ImgFrame4StateApi] = useSpring(() => ({ from: eval('ImgFrame4' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const EngineeringStandupProperty1Default = { color: `rgba(0, 0, 0, 1)`  }
  const EngineeringStandupProperty1Variant2 = { color: `rgba(107, 104, 255, 1)`  }
  const EngineeringStandupProperty1Variant3 = { color: `rgba(214, 41, 93, 1)`  }
  const [EngineeringStandupStateStyles, EngineeringStandupStateApi] = useSpring(() => ({ from: eval('EngineeringStandup' + data.currentVariant), config: { duration: 1000 }, delay: 500 }))

  const switchStateToProperty1Default: (duration: number, delay: number, easing: string) => void = (duration: number = 0, delay: number = 0, easing: string = 'linear') => {
    ImgFrame4StateApi.start({ ...ImgFrame4Property1Default, delay, config: { duration, easing: easings[easing] } })
    EngineeringStandupStateApi.start({ ...EngineeringStandupProperty1Default, delay, config: { duration, easing: easings[easing] } })
  };

  const switchStateToProperty1Variant2: (duration: number, delay: number, easing: string) => void = (duration: number = 0, delay: number = 0, easing: string = 'linear') => {
    ImgFrame4StateApi.start({ ...ImgFrame4Property1Variant2, delay, config: { duration, easing: easings[easing] } })
    EngineeringStandupStateApi.start({ ...EngineeringStandupProperty1Variant2, delay, config: { duration, easing: easings[easing] } })
  };

  const switchStateToProperty1Variant3: (duration: number, delay: number, easing: string) => void = (duration: number = 0, delay: number = 0, easing: string = 'linear') => {
    ImgFrame4StateApi.start({ ...ImgFrame4Property1Variant3, delay, config: { duration, easing: easings[easing] } })
    EngineeringStandupStateApi.start({ ...EngineeringStandupProperty1Variant3, delay, config: { duration, easing: easings[easing] } })
  };
  return (
    <Property1Default  className={props.className}   >
      <ImgFrame4 data={data}  style={{ ...ImgFrame4StateStyles }}>
      </ImgFrame4>
      <Frame5 >
        <Frame3 >
          <ImgQ3DCurrentView2 onClick={fns.onVisible} onMouseOver={() => {  switchStateToProperty1Variant3(1.5 * 1000, 0.25 * 1000, "easeInOutBounce"); fns.setPreviousVariant(data.currentVariant); fns.setCurrentVariant("Property1Variant3");  }} onMouseOut={() => {  eval("switchStateTo" + data.previousVariant)(1.5 * 1000, 0.25 * 1000, "easeInOutBounce"); fns.setPreviousVariant("Property1Variant3"); fns.setCurrentVariant(data.previousVariant);  }}  src={`${data.currentVariant === 'Property1Variant2' ? ImgQ3DCurrentView2Image1 : data.currentVariant === 'Property1Variant3' ? ImgQ3DCurrentView2Image2 : ImgQ3DCurrentView2Image }`} alt={"img:Q_3D-Current-View2"}/>
          <Frame1 >
            <EngineeringStandup data={data}  onClick={fns.test} style={{ ...EngineeringStandupStateStyles }}>
              {`Engineering Standup`}
                </EngineeringStandup>
            <PlaylistAddCheck >
              <Vector  src={VectorImage} alt={"Vector"}/>
              <Q3DCurrentView21  src={Q3DCurrentView21Image} alt={"Q_3D-Current-View2 1"}/>
            </PlaylistAddCheck>
          </Frame1>
        </Frame3>
      </Frame5>
    </Property1Default>
  );
}

export default ImageUploadTest;
